@require: base/block
@require: base/inline
@require: base/list-ext
@require: base/option-ext
@require: base/tuple
@require: gr
@require: pervasives
@require: vdecoset
@require: annot

@import: ../font-config
@import: data

module BibliographySection : sig

  val render : bib-defs -> context -> block-boxes

end = struct

  open FontConfig

  let bib-left-padding = 20pt

  let-inline ctx \url it = ctx
    |> set-font Latin font-latin-mono
    |> Inline.read it

  let-inline ctx \book-title it = ctx
    |> set-font Latin font-latin-italic
    |> Inline.read it

  let join-it-authors authors =
    match List.reverse authors with
    | []                 -> {}
    | it :: []           -> it
    | it2 :: it1 :: []   -> { #it1; and #it2; }
    | it-last :: it-rest ->
      let it = it-rest
        |> List.reverse
        |> List.fold-left (fun itacc it -> (
          { #itacc; #it;,\  }
        )) {} in
      { #it; and #it-last; }

    let make-it-volume-and-number optvol optnum optseries =
      let it-series =
        match optseries with
        | None     -> { ,\  }
        | Some(it) -> { \ of \book-title{ #it; },\  } in
      match (optvol, optnum) with
      | (None, _)          -> { \  }
      | (Some(v), None)    ->
        let it-volume = embed-string (arabic v)
        in { #it-volume; #it-series; }
      | (Some(v), Some(n)) ->
        let it-volume = embed-string (arabic v)
        in { #it-volume; (#n;) #it-series; }

    let make-it-bib-pages (p1, p2) =
      embed-string ((arabic p1) ^ `â€“` ^ (arabic p2))

    let make-ib-bib-item-content ctx bibitem = ctx
      |> Inline.read (match bibitem with
        | InProceedings(r) ->
          let it-authors = join-it-authors r#author in
          let it-title = r#title in
          let it-book-title = r#booktitle in
          let it-volnum = make-it-volume-and-number r#volume r#number r#series in
          let it-pages = make-it-bib-pages r#pages in
          let it-year = embed-string (arabic r#year) in
          {
            #it-authors;.
            #it-title;.
            In \book-title{ #it-book-title; },
            #it-volnum;
            pages #it-pages;,
            #it-year;.
          }
        | Article(r) ->
          let it-authors = join-it-authors r#author in
          let it-title = r#title in
          let it-journal = r#journal in
          let it-volnum = make-it-volume-and-number r#volume r#number None in
          let it-pages = make-it-bib-pages r#pages in
          let it-year = embed-string (arabic r#year) in
          {
            #it-authors;.
            #it-title;.
            \book-title{#it-journal;},
            #it-volnum;
            pages #it-pages;,
            #it-year;.
          }
        | Book(r) ->
          let it-authors = join-it-authors r#author in
          let it-title = r#title in
          let it-publisher = r#publisher in
          let it-year = embed-string (arabic r#year) in
          {
            #it-authors;.
            \book-title{#it-title;}.
            #it-publisher;,
            #it-year;.
          }
        | WebSite(r) ->
          let it-authors = join-it-authors r#author in
          let it-title = r#title in
          let it-url = r#url |> Url.get-inline-text in
          let it-year = embed-string (arabic r#year) in
          {
            #it-authors;.
            \book-title{ #it-title; }.
            \url{ \href(r#url |> Url.get-string)(it-url); },
            #it-year;.
          })

  let make-bb-bib-item ctx bibitem cite-num =
    let ib-content = make-ib-bib-item-content ctx bibitem in
    let ib-num = ctx
      |> Inline.read (embed-string (`[` ^ arabic cite-num ^ `] `#)) in
    let ib-bib-item =
      inline-skip (0pt -' get-natural-width ib-num) ++
      ib-num ++ ib-content ++ inline-fil in
    let pads = (bib-left-padding, 0pt, 0pt, 0pt) in
    block-frame-breakable
      ctx
      pads
      VDecoSet.empty
      (fun ctx -> line-break true true ctx ib-bib-item)

  let render bib-defs ctx =
    bib-defs
    |> List.map Pair.snd
    |> List.fold-lefti (fun idx bbacc bibitem -> (
      let cite-num = idx + 1
      in
      bbacc +++ make-bb-bib-item ctx bibitem cite-num)
    ) Block.nil

end
